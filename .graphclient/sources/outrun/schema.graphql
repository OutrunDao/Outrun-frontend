schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

type LiquidityHolding {
  id: String!
  pair: Bytes!
  user: Bytes!
  token0: Bytes!
  token1: Bytes!
  amount0: BigInt!
  amount1: BigInt!
}

input LiquidityHolding_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pair: Bytes
  pair_not: Bytes
  pair_gt: Bytes
  pair_lt: Bytes
  pair_gte: Bytes
  pair_lte: Bytes
  pair_in: [Bytes!]
  pair_not_in: [Bytes!]
  pair_contains: Bytes
  pair_not_contains: Bytes
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  token0: Bytes
  token0_not: Bytes
  token0_gt: Bytes
  token0_lt: Bytes
  token0_gte: Bytes
  token0_lte: Bytes
  token0_in: [Bytes!]
  token0_not_in: [Bytes!]
  token0_contains: Bytes
  token0_not_contains: Bytes
  token1: Bytes
  token1_not: Bytes
  token1_gt: Bytes
  token1_lt: Bytes
  token1_gte: Bytes
  token1_lte: Bytes
  token1_in: [Bytes!]
  token1_not_in: [Bytes!]
  token1_contains: Bytes
  token1_not_contains: Bytes
  amount0: BigInt
  amount0_not: BigInt
  amount0_gt: BigInt
  amount0_lt: BigInt
  amount0_gte: BigInt
  amount0_lte: BigInt
  amount0_in: [BigInt!]
  amount0_not_in: [BigInt!]
  amount1: BigInt
  amount1_not: BigInt
  amount1_gt: BigInt
  amount1_lt: BigInt
  amount1_gte: BigInt
  amount1_lte: BigInt
  amount1_in: [BigInt!]
  amount1_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityHolding_filter]
  or: [LiquidityHolding_filter]
}

enum LiquidityHolding_orderBy {
  id
  pair
  user
  token0
  token1
  amount0
  amount1
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PairCreated {
  id: Bytes!
  token0: Bytes!
  token1: Bytes!
  pair: Bytes!
}

input PairCreated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token0: Bytes
  token0_not: Bytes
  token0_gt: Bytes
  token0_lt: Bytes
  token0_gte: Bytes
  token0_lte: Bytes
  token0_in: [Bytes!]
  token0_not_in: [Bytes!]
  token0_contains: Bytes
  token0_not_contains: Bytes
  token1: Bytes
  token1_not: Bytes
  token1_gt: Bytes
  token1_lt: Bytes
  token1_gte: Bytes
  token1_lte: Bytes
  token1_in: [Bytes!]
  token1_not_in: [Bytes!]
  token1_contains: Bytes
  token1_not_contains: Bytes
  pair: Bytes
  pair_not: Bytes
  pair_gt: Bytes
  pair_lt: Bytes
  pair_gte: Bytes
  pair_lte: Bytes
  pair_in: [Bytes!]
  pair_not_in: [Bytes!]
  pair_contains: Bytes
  pair_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PairCreated_filter]
  or: [PairCreated_filter]
}

enum PairCreated_orderBy {
  id
  token0
  token1
  pair
}

type Query {
  pairCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairCreated
  pairCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: PairCreated_orderBy
    orderDirection: OrderDirection
    where: PairCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairCreated!]!
  liquidityHolding(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityHolding
  liquidityHoldings(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityHolding_orderBy
    orderDirection: OrderDirection
    where: LiquidityHolding_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityHolding!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  pairCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairCreated
  pairCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: PairCreated_orderBy
    orderDirection: OrderDirection
    where: PairCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairCreated!]!
  liquidityHolding(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityHolding
  liquidityHoldings(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityHolding_orderBy
    orderDirection: OrderDirection
    where: LiquidityHolding_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityHolding!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
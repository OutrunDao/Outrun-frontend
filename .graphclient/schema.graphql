schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Query {
  pairCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairCreated
  pairCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: PairCreated_orderBy
    orderDirection: OrderDirection
    where: PairCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairCreated!]!
  pairTvl(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairTvl
  pairTvls(
    skip: Int = 0
    first: Int = 100
    orderBy: PairTvl_orderBy
    orderDirection: OrderDirection
    where: PairTvl_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairTvl!]!
  liquidityHolding(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityHolding
  liquidityHoldings(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityHolding_orderBy
    orderDirection: OrderDirection
    where: LiquidityHolding_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityHolding!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  extendLockTime(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExtendLockTime
  extendLockTimes(
    skip: Int = 0
    first: Int = 100
    orderBy: ExtendLockTime_orderBy
    orderDirection: OrderDirection
    where: ExtendLockTime_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExtendLockTime!]!
  ownershipTransferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnershipTransferred
  ownershipTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnershipTransferred_orderBy
    orderDirection: OrderDirection
    where: OwnershipTransferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnershipTransferred!]!
  setForceUnstakeFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetForceUnstakeFee
  setForceUnstakeFees(
    skip: Int = 0
    first: Int = 100
    orderBy: SetForceUnstakeFee_orderBy
    orderDirection: OrderDirection
    where: SetForceUnstakeFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetForceUnstakeFee!]!
  setMaxLockupDays(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetMaxLockupDays
  setMaxLockupDays_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: SetMaxLockupDays_orderBy
    orderDirection: OrderDirection
    where: SetMaxLockupDays_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetMaxLockupDays!]!
  setMinLockupDays(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetMinLockupDays
  setMinLockupDays_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: SetMinLockupDays_orderBy
    orderDirection: OrderDirection
    where: SetMinLockupDays_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetMinLockupDays!]!
  setOutETHVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetOutETHVault
  setOutETHVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: SetOutETHVault_orderBy
    orderDirection: OrderDirection
    where: SetOutETHVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetOutETHVault!]!
  stakeRETH(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StakeRETH
  stakeRETHs(
    skip: Int = 0
    first: Int = 100
    orderBy: StakeRETH_orderBy
    orderDirection: OrderDirection
    where: StakeRETH_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StakeRETH!]!
  unstake(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unstake
  unstakes(
    skip: Int = 0
    first: Int = 100
    orderBy: Unstake_orderBy
    orderDirection: OrderDirection
    where: Unstake_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unstake!]!
  withdrawYield(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawYield
  withdrawYields(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawYield_orderBy
    orderDirection: OrderDirection
    where: WithdrawYield_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawYield!]!
}

type Subscription {
  pairCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairCreated
  pairCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: PairCreated_orderBy
    orderDirection: OrderDirection
    where: PairCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairCreated!]!
  pairTvl(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PairTvl
  pairTvls(
    skip: Int = 0
    first: Int = 100
    orderBy: PairTvl_orderBy
    orderDirection: OrderDirection
    where: PairTvl_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PairTvl!]!
  liquidityHolding(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LiquidityHolding
  liquidityHoldings(
    skip: Int = 0
    first: Int = 100
    orderBy: LiquidityHolding_orderBy
    orderDirection: OrderDirection
    where: LiquidityHolding_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LiquidityHolding!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  extendLockTime(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ExtendLockTime
  extendLockTimes(
    skip: Int = 0
    first: Int = 100
    orderBy: ExtendLockTime_orderBy
    orderDirection: OrderDirection
    where: ExtendLockTime_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ExtendLockTime!]!
  ownershipTransferred(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OwnershipTransferred
  ownershipTransferreds(
    skip: Int = 0
    first: Int = 100
    orderBy: OwnershipTransferred_orderBy
    orderDirection: OrderDirection
    where: OwnershipTransferred_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [OwnershipTransferred!]!
  setForceUnstakeFee(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetForceUnstakeFee
  setForceUnstakeFees(
    skip: Int = 0
    first: Int = 100
    orderBy: SetForceUnstakeFee_orderBy
    orderDirection: OrderDirection
    where: SetForceUnstakeFee_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetForceUnstakeFee!]!
  setMaxLockupDays(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetMaxLockupDays
  setMaxLockupDays_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: SetMaxLockupDays_orderBy
    orderDirection: OrderDirection
    where: SetMaxLockupDays_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetMaxLockupDays!]!
  setMinLockupDays(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetMinLockupDays
  setMinLockupDays_collection(
    skip: Int = 0
    first: Int = 100
    orderBy: SetMinLockupDays_orderBy
    orderDirection: OrderDirection
    where: SetMinLockupDays_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetMinLockupDays!]!
  setOutETHVault(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SetOutETHVault
  setOutETHVaults(
    skip: Int = 0
    first: Int = 100
    orderBy: SetOutETHVault_orderBy
    orderDirection: OrderDirection
    where: SetOutETHVault_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SetOutETHVault!]!
  stakeRETH(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): StakeRETH
  stakeRETHs(
    skip: Int = 0
    first: Int = 100
    orderBy: StakeRETH_orderBy
    orderDirection: OrderDirection
    where: StakeRETH_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [StakeRETH!]!
  unstake(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unstake
  unstakes(
    skip: Int = 0
    first: Int = 100
    orderBy: Unstake_orderBy
    orderDirection: OrderDirection
    where: Unstake_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Unstake!]!
  withdrawYield(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WithdrawYield
  withdrawYields(
    skip: Int = 0
    first: Int = 100
    orderBy: WithdrawYield_orderBy
    orderDirection: OrderDirection
    where: WithdrawYield_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [WithdrawYield!]!
}

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

type LiquidityHolding {
  id: String!
  pair: Bytes!
  user: Bytes!
  token0: Bytes!
  token1: Bytes!
  amount0: BigInt!
  amount1: BigInt!
  symbol0: String
  symbol1: String
}

input LiquidityHolding_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pair: Bytes
  pair_not: Bytes
  pair_gt: Bytes
  pair_lt: Bytes
  pair_gte: Bytes
  pair_lte: Bytes
  pair_in: [Bytes!]
  pair_not_in: [Bytes!]
  pair_contains: Bytes
  pair_not_contains: Bytes
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  token0: Bytes
  token0_not: Bytes
  token0_gt: Bytes
  token0_lt: Bytes
  token0_gte: Bytes
  token0_lte: Bytes
  token0_in: [Bytes!]
  token0_not_in: [Bytes!]
  token0_contains: Bytes
  token0_not_contains: Bytes
  token1: Bytes
  token1_not: Bytes
  token1_gt: Bytes
  token1_lt: Bytes
  token1_gte: Bytes
  token1_lte: Bytes
  token1_in: [Bytes!]
  token1_not_in: [Bytes!]
  token1_contains: Bytes
  token1_not_contains: Bytes
  amount0: BigInt
  amount0_not: BigInt
  amount0_gt: BigInt
  amount0_lt: BigInt
  amount0_gte: BigInt
  amount0_lte: BigInt
  amount0_in: [BigInt!]
  amount0_not_in: [BigInt!]
  amount1: BigInt
  amount1_not: BigInt
  amount1_gt: BigInt
  amount1_lt: BigInt
  amount1_gte: BigInt
  amount1_lte: BigInt
  amount1_in: [BigInt!]
  amount1_not_in: [BigInt!]
  symbol0: String
  symbol0_not: String
  symbol0_gt: String
  symbol0_lt: String
  symbol0_gte: String
  symbol0_lte: String
  symbol0_in: [String!]
  symbol0_not_in: [String!]
  symbol0_contains: String
  symbol0_contains_nocase: String
  symbol0_not_contains: String
  symbol0_not_contains_nocase: String
  symbol0_starts_with: String
  symbol0_starts_with_nocase: String
  symbol0_not_starts_with: String
  symbol0_not_starts_with_nocase: String
  symbol0_ends_with: String
  symbol0_ends_with_nocase: String
  symbol0_not_ends_with: String
  symbol0_not_ends_with_nocase: String
  symbol1: String
  symbol1_not: String
  symbol1_gt: String
  symbol1_lt: String
  symbol1_gte: String
  symbol1_lte: String
  symbol1_in: [String!]
  symbol1_not_in: [String!]
  symbol1_contains: String
  symbol1_contains_nocase: String
  symbol1_not_contains: String
  symbol1_not_contains_nocase: String
  symbol1_starts_with: String
  symbol1_starts_with_nocase: String
  symbol1_not_starts_with: String
  symbol1_not_starts_with_nocase: String
  symbol1_ends_with: String
  symbol1_ends_with_nocase: String
  symbol1_not_ends_with: String
  symbol1_not_ends_with_nocase: String
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LiquidityHolding_filter]
  or: [LiquidityHolding_filter]
}

enum LiquidityHolding_orderBy {
  id
  pair
  user
  token0
  token1
  amount0
  amount1
  symbol0
  symbol1
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type PairCreated {
  id: Bytes!
  token0: Bytes!
  token1: Bytes!
  pair: Bytes!
}

input PairCreated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  token0: Bytes
  token0_not: Bytes
  token0_gt: Bytes
  token0_lt: Bytes
  token0_gte: Bytes
  token0_lte: Bytes
  token0_in: [Bytes!]
  token0_not_in: [Bytes!]
  token0_contains: Bytes
  token0_not_contains: Bytes
  token1: Bytes
  token1_not: Bytes
  token1_gt: Bytes
  token1_lt: Bytes
  token1_gte: Bytes
  token1_lte: Bytes
  token1_in: [Bytes!]
  token1_not_in: [Bytes!]
  token1_contains: Bytes
  token1_not_contains: Bytes
  pair: Bytes
  pair_not: Bytes
  pair_gt: Bytes
  pair_lt: Bytes
  pair_gte: Bytes
  pair_lte: Bytes
  pair_in: [Bytes!]
  pair_not_in: [Bytes!]
  pair_contains: Bytes
  pair_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PairCreated_filter]
  or: [PairCreated_filter]
}

enum PairCreated_orderBy {
  id
  token0
  token1
  pair
}

type PairTvl {
  id: String!
  pair: Bytes!
  reserve0: BigInt!
  reserve1: BigInt!
  symbol0: String
  symbol1: String
  token0: Bytes!
  token1: Bytes!
}

input PairTvl_filter {
  id: String
  id_not: String
  id_gt: String
  id_lt: String
  id_gte: String
  id_lte: String
  id_in: [String!]
  id_not_in: [String!]
  id_contains: String
  id_contains_nocase: String
  id_not_contains: String
  id_not_contains_nocase: String
  id_starts_with: String
  id_starts_with_nocase: String
  id_not_starts_with: String
  id_not_starts_with_nocase: String
  id_ends_with: String
  id_ends_with_nocase: String
  id_not_ends_with: String
  id_not_ends_with_nocase: String
  pair: Bytes
  pair_not: Bytes
  pair_gt: Bytes
  pair_lt: Bytes
  pair_gte: Bytes
  pair_lte: Bytes
  pair_in: [Bytes!]
  pair_not_in: [Bytes!]
  pair_contains: Bytes
  pair_not_contains: Bytes
  reserve0: BigInt
  reserve0_not: BigInt
  reserve0_gt: BigInt
  reserve0_lt: BigInt
  reserve0_gte: BigInt
  reserve0_lte: BigInt
  reserve0_in: [BigInt!]
  reserve0_not_in: [BigInt!]
  reserve1: BigInt
  reserve1_not: BigInt
  reserve1_gt: BigInt
  reserve1_lt: BigInt
  reserve1_gte: BigInt
  reserve1_lte: BigInt
  reserve1_in: [BigInt!]
  reserve1_not_in: [BigInt!]
  symbol0: String
  symbol0_not: String
  symbol0_gt: String
  symbol0_lt: String
  symbol0_gte: String
  symbol0_lte: String
  symbol0_in: [String!]
  symbol0_not_in: [String!]
  symbol0_contains: String
  symbol0_contains_nocase: String
  symbol0_not_contains: String
  symbol0_not_contains_nocase: String
  symbol0_starts_with: String
  symbol0_starts_with_nocase: String
  symbol0_not_starts_with: String
  symbol0_not_starts_with_nocase: String
  symbol0_ends_with: String
  symbol0_ends_with_nocase: String
  symbol0_not_ends_with: String
  symbol0_not_ends_with_nocase: String
  symbol1: String
  symbol1_not: String
  symbol1_gt: String
  symbol1_lt: String
  symbol1_gte: String
  symbol1_lte: String
  symbol1_in: [String!]
  symbol1_not_in: [String!]
  symbol1_contains: String
  symbol1_contains_nocase: String
  symbol1_not_contains: String
  symbol1_not_contains_nocase: String
  symbol1_starts_with: String
  symbol1_starts_with_nocase: String
  symbol1_not_starts_with: String
  symbol1_not_starts_with_nocase: String
  symbol1_ends_with: String
  symbol1_ends_with_nocase: String
  symbol1_not_ends_with: String
  symbol1_not_ends_with_nocase: String
  token0: Bytes
  token0_not: Bytes
  token0_gt: Bytes
  token0_lt: Bytes
  token0_gte: Bytes
  token0_lte: Bytes
  token0_in: [Bytes!]
  token0_not_in: [Bytes!]
  token0_contains: Bytes
  token0_not_contains: Bytes
  token1: Bytes
  token1_not: Bytes
  token1_gt: Bytes
  token1_lt: Bytes
  token1_gte: Bytes
  token1_lte: Bytes
  token1_in: [Bytes!]
  token1_not_in: [Bytes!]
  token1_contains: Bytes
  token1_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PairTvl_filter]
  or: [PairTvl_filter]
}

enum PairTvl_orderBy {
  id
  pair
  reserve0
  reserve1
  symbol0
  symbol1
  token0
  token1
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type ExtendLockTime {
  id: Bytes!
  positionId: BigInt!
  extendDays: BigInt!
  mintedREY: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input ExtendLockTime_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  positionId: BigInt
  positionId_not: BigInt
  positionId_gt: BigInt
  positionId_lt: BigInt
  positionId_gte: BigInt
  positionId_lte: BigInt
  positionId_in: [BigInt!]
  positionId_not_in: [BigInt!]
  extendDays: BigInt
  extendDays_not: BigInt
  extendDays_gt: BigInt
  extendDays_lt: BigInt
  extendDays_gte: BigInt
  extendDays_lte: BigInt
  extendDays_in: [BigInt!]
  extendDays_not_in: [BigInt!]
  mintedREY: BigInt
  mintedREY_not: BigInt
  mintedREY_gt: BigInt
  mintedREY_lt: BigInt
  mintedREY_gte: BigInt
  mintedREY_lte: BigInt
  mintedREY_in: [BigInt!]
  mintedREY_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ExtendLockTime_filter]
  or: [ExtendLockTime_filter]
}

enum ExtendLockTime_orderBy {
  id
  positionId
  extendDays
  mintedREY
  blockNumber
  blockTimestamp
  transactionHash
}

type OwnershipTransferred {
  id: Bytes!
  previousOwner: Bytes!
  newOwner: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input OwnershipTransferred_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  previousOwner: Bytes
  previousOwner_not: Bytes
  previousOwner_gt: Bytes
  previousOwner_lt: Bytes
  previousOwner_gte: Bytes
  previousOwner_lte: Bytes
  previousOwner_in: [Bytes!]
  previousOwner_not_in: [Bytes!]
  previousOwner_contains: Bytes
  previousOwner_not_contains: Bytes
  newOwner: Bytes
  newOwner_not: Bytes
  newOwner_gt: Bytes
  newOwner_lt: Bytes
  newOwner_gte: Bytes
  newOwner_lte: Bytes
  newOwner_in: [Bytes!]
  newOwner_not_in: [Bytes!]
  newOwner_contains: Bytes
  newOwner_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OwnershipTransferred_filter]
  or: [OwnershipTransferred_filter]
}

enum OwnershipTransferred_orderBy {
  id
  previousOwner
  newOwner
  blockNumber
  blockTimestamp
  transactionHash
}

type SetForceUnstakeFee {
  id: Bytes!
  _forceUnstakeFee: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input SetForceUnstakeFee_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  _forceUnstakeFee: BigInt
  _forceUnstakeFee_not: BigInt
  _forceUnstakeFee_gt: BigInt
  _forceUnstakeFee_lt: BigInt
  _forceUnstakeFee_gte: BigInt
  _forceUnstakeFee_lte: BigInt
  _forceUnstakeFee_in: [BigInt!]
  _forceUnstakeFee_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SetForceUnstakeFee_filter]
  or: [SetForceUnstakeFee_filter]
}

enum SetForceUnstakeFee_orderBy {
  id
  _forceUnstakeFee
  blockNumber
  blockTimestamp
  transactionHash
}

type SetMaxLockupDays {
  id: Bytes!
  _maxLockupDays: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input SetMaxLockupDays_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  _maxLockupDays: Int
  _maxLockupDays_not: Int
  _maxLockupDays_gt: Int
  _maxLockupDays_lt: Int
  _maxLockupDays_gte: Int
  _maxLockupDays_lte: Int
  _maxLockupDays_in: [Int!]
  _maxLockupDays_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SetMaxLockupDays_filter]
  or: [SetMaxLockupDays_filter]
}

enum SetMaxLockupDays_orderBy {
  id
  _maxLockupDays
  blockNumber
  blockTimestamp
  transactionHash
}

type SetMinLockupDays {
  id: Bytes!
  _minLockupDays: Int!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input SetMinLockupDays_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  _minLockupDays: Int
  _minLockupDays_not: Int
  _minLockupDays_gt: Int
  _minLockupDays_lt: Int
  _minLockupDays_gte: Int
  _minLockupDays_lte: Int
  _minLockupDays_in: [Int!]
  _minLockupDays_not_in: [Int!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SetMinLockupDays_filter]
  or: [SetMinLockupDays_filter]
}

enum SetMinLockupDays_orderBy {
  id
  _minLockupDays
  blockNumber
  blockTimestamp
  transactionHash
}

type SetOutETHVault {
  id: Bytes!
  _outETHVault: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input SetOutETHVault_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  _outETHVault: Bytes
  _outETHVault_not: Bytes
  _outETHVault_gt: Bytes
  _outETHVault_lt: Bytes
  _outETHVault_gte: Bytes
  _outETHVault_lte: Bytes
  _outETHVault_in: [Bytes!]
  _outETHVault_not_in: [Bytes!]
  _outETHVault_contains: Bytes
  _outETHVault_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SetOutETHVault_filter]
  or: [SetOutETHVault_filter]
}

enum SetOutETHVault_orderBy {
  id
  _outETHVault
  blockNumber
  blockTimestamp
  transactionHash
}

type StakeRETH {
  id: Bytes!
  _positionId: BigInt!
  _account: Bytes!
  _amountInRETH: BigInt!
  _deadline: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input StakeRETH_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  _positionId: BigInt
  _positionId_not: BigInt
  _positionId_gt: BigInt
  _positionId_lt: BigInt
  _positionId_gte: BigInt
  _positionId_lte: BigInt
  _positionId_in: [BigInt!]
  _positionId_not_in: [BigInt!]
  _account: Bytes
  _account_not: Bytes
  _account_gt: Bytes
  _account_lt: Bytes
  _account_gte: Bytes
  _account_lte: Bytes
  _account_in: [Bytes!]
  _account_not_in: [Bytes!]
  _account_contains: Bytes
  _account_not_contains: Bytes
  _amountInRETH: BigInt
  _amountInRETH_not: BigInt
  _amountInRETH_gt: BigInt
  _amountInRETH_lt: BigInt
  _amountInRETH_gte: BigInt
  _amountInRETH_lte: BigInt
  _amountInRETH_in: [BigInt!]
  _amountInRETH_not_in: [BigInt!]
  _deadline: BigInt
  _deadline_not: BigInt
  _deadline_gt: BigInt
  _deadline_lt: BigInt
  _deadline_gte: BigInt
  _deadline_lte: BigInt
  _deadline_in: [BigInt!]
  _deadline_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [StakeRETH_filter]
  or: [StakeRETH_filter]
}

enum StakeRETH_orderBy {
  id
  _positionId
  _account
  _amountInRETH
  _deadline
  blockNumber
  blockTimestamp
  transactionHash
}

type Unstake {
  id: Bytes!
  _positionId: BigInt!
  _account: Bytes!
  _amountInRETH: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input Unstake_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  _positionId: BigInt
  _positionId_not: BigInt
  _positionId_gt: BigInt
  _positionId_lt: BigInt
  _positionId_gte: BigInt
  _positionId_lte: BigInt
  _positionId_in: [BigInt!]
  _positionId_not_in: [BigInt!]
  _account: Bytes
  _account_not: Bytes
  _account_gt: Bytes
  _account_lt: Bytes
  _account_gte: Bytes
  _account_lte: Bytes
  _account_in: [Bytes!]
  _account_not_in: [Bytes!]
  _account_contains: Bytes
  _account_not_contains: Bytes
  _amountInRETH: BigInt
  _amountInRETH_not: BigInt
  _amountInRETH_gt: BigInt
  _amountInRETH_lt: BigInt
  _amountInRETH_gte: BigInt
  _amountInRETH_lte: BigInt
  _amountInRETH_in: [BigInt!]
  _amountInRETH_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Unstake_filter]
  or: [Unstake_filter]
}

enum Unstake_orderBy {
  id
  _positionId
  _account
  _amountInRETH
  blockNumber
  blockTimestamp
  transactionHash
}

type WithdrawYield {
  id: Bytes!
  user: Bytes!
  amountInREY: BigInt!
  yieldAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input WithdrawYield_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  user: Bytes
  user_not: Bytes
  user_gt: Bytes
  user_lt: Bytes
  user_gte: Bytes
  user_lte: Bytes
  user_in: [Bytes!]
  user_not_in: [Bytes!]
  user_contains: Bytes
  user_not_contains: Bytes
  amountInREY: BigInt
  amountInREY_not: BigInt
  amountInREY_gt: BigInt
  amountInREY_lt: BigInt
  amountInREY_gte: BigInt
  amountInREY_lte: BigInt
  amountInREY_in: [BigInt!]
  amountInREY_not_in: [BigInt!]
  yieldAmount: BigInt
  yieldAmount_not: BigInt
  yieldAmount_gt: BigInt
  yieldAmount_lt: BigInt
  yieldAmount_gte: BigInt
  yieldAmount_lte: BigInt
  yieldAmount_in: [BigInt!]
  yieldAmount_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WithdrawYield_filter]
  or: [WithdrawYield_filter]
}

enum WithdrawYield_orderBy {
  id
  user
  amountInREY
  yieldAmount
  blockNumber
  blockTimestamp
  transactionHash
}